<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Express(二) 路由与中间件</title>
    <link href="/2024/05/31/express2/"/>
    <url>/2024/05/31/express2/</url>
    
    <content type="html"><![CDATA[<p><a name="DyCNs"></a></p><h3 id="1-搭建最简单服务器"><a href="#1-搭建最简单服务器" class="headerlink" title="1.搭建最简单服务器"></a>1.搭建最简单服务器</h3><p>上节课我们学习到用原生的 http 搭建服务器，今天我们学习使用 express 框架搭建 web 服务器。<br>方法也简单，通过导入 express 模块，创建 web 服务器，就可以使用了。<br>使用 app.get 和 post 监听客户端响应，其中第一个参数‘&#x2F;user’是路由，req 是请求对象，res 是响应对象，它们各自又许多的方法。比如我们使用res.send()方法可以向客户端响应一个JSON对象。具体如何做呢？ <br>我们需要在 VScode 上下载 Postcode 插件，它可以模拟客户端向我们创建的服务器发送请求。<br>另外我们可以下载 nodemon 安装包，它可以让我们在修改客户端代码后自动重启服务器，不需要我们手动关闭让后在重新启动，十分方便。启动命令安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm i nodemon<br></code></pre></td></tr></table></figure><p>启动服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">nodemon .\<span class="hljs-number">1.</span>创建服务器.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><p>然后打开 Postcode 页面，点击左上角 create，选择 get 方法，输入我们客户端的 url 地址，别忘了加上后面的’&#x2F;user’查询参数：<br><img src="1.png" alt="image.png"><br>这样，我们就接收到了服务器发送的res.send（）中的数据了。<br>此外我们的服务器也可以获得 客户端 url 上的查询参数，通过req.query 直接获取客户端参数，并打印在终端查看。 <br><img src="2.png" alt="image.png"><br>如果我们需要获取动态参数的话，在路由端通过**:参数名**的形式，可以匹配多个参数，用 req.parmas 接收匹配到的动态参数并打印：<br><img src="3.png" alt="image.png"><br>该过程具体的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-comment">//创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">//监听get和post</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>    <span class="hljs-comment">//调用express提供的res.send()方法，向客户端响应一个JSON对象</span><br>    res.<span class="hljs-title function_">send</span>(&#123; <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;吕树&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;20&#x27;</span> &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//调用express提供的res.send()方法，向客户端响应一个文本字符串</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;请求成功！&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// req.query 获取客户端参数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">query</span>);<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">query</span>)<br>&#125;)<br><br><span class="hljs-comment">//获取动态参数   通过:参数名的形式，可以匹配多个参数</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:id/:name&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//req.params 是动态匹配到的URL参数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">params</span>);<br>    res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>)<br>&#125;)<br><br><span class="hljs-comment">//启动服务器   8080是端口号</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server runninga at http://127.0.0.1:8080&#x27;</span>);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p><a name="trdh5"></a></p><h3 id="2-路由模块化"><a href="#2-路由模块化" class="headerlink" title="2.路由模块化"></a>2.路由模块化</h3><p>当我们需要定义很多路由时，为了避免麻烦，可以使路由模块化。先在 router.js 中定义路由模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这是路由模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>()<br><br><span class="hljs-comment">//3.挂载具体的路由</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/list&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Get user list&#x27;</span>);<br>&#125;)<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user/add&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;add new user&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 导出路由</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router<br></code></pre></td></tr></table></figure><p>然后使用路由，我们需要定义一个 router 来接收路由模块，使用 app.use()注册路由，，’&#x2F;api’是该 url 请求路由的公共前缀，方便标识路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">//1.导入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./4.1router.js&#x27;</span>)<br><span class="hljs-comment">//2.注册路由   &#x27;/api&#x27;是私有公共前缀，可以没有</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>,router)<br><span class="hljs-comment">//app.use() 作用是注册全局中间件</span><br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server runninga at http://localhost:8080&#x27;</span>);<br>&#125;) <br></code></pre></td></tr></table></figure><p><img src="4.png" alt="image.png"><br><a name="iLCPg"></a></p><h3 id="3-中间件"><a href="#3-中间件" class="headerlink" title="3.中间件"></a>3.中间件</h3><p>Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。<br>中间件（Middleware） 是一个<strong>函数</strong>，它可以访问<strong>请求对象（request object (req)）</strong>, <strong>响应对象（response object (res)）</strong>, 和 web 应用中处于请求-响应循环流程中的中间件，<strong>一般被命名为 next 的变量。</strong><br><strong>next函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。</strong><br><strong>上游的中间件和下游的中间件及路由之间，共享同一份req和res。</strong><br><strong>中间件的作用主要包括以下几个方面：</strong></p><ol><li><strong>请求和响应的处理</strong>：<ul><li>中间件函数可以对请求对象（req）和响应对象（res）进行修改，从而影响后续中间件和最终的请求处理逻辑。</li><li>例如，可以解析请求体的数据，处理文件上传，添加响应头等。</li></ul></li><li><strong>控制请求的流转</strong>：<ul><li>中间件可以决定是否将控制权传递给下一个中间件函数。</li><li>通过调用next()函数，可以将控制权传递给下一个中间件。如果不调用next()，请求将不会继续往下传递，从而可以实现请求的拦截和处理。</li></ul></li><li><strong>执行特定任务</strong>：<ul><li>中间件可以执行各种任务，如用户认证、日志记录、错误处理等。</li><li>例如，可以在中间件中验证用户的身份信息，如果身份验证失败，可以直接返回错误响应，而不必进入下一个中间件或最终的路由处理函数。</li></ul></li><li><strong>路由处理</strong>：<ul><li>中间件可以根据请求的路径和方法，选择特定的处理函数来处理请求。</li><li>Express等框架中，路由也是通过中间件实现的，不同路径的请求会被不同的路由中间件处理。<br><a name="AO0QY"></a></li></ul></li></ol><h4 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h4><p>我们可以定义一个中间件函数，在函数中别忘了在最后添加 next()，然后使用 app.use（）注册为全局生效。还有更简单的方法就是直接在 app.use()中定义中间件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br> <br><span class="hljs-comment">//定义全局中间件的简化形式</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;最简单的中间件&#x27;</span>);<br>    <span class="hljs-comment">//获取请求到达服务器的时间</span><br>    <span class="hljs-keyword">const</span> time = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>    <span class="hljs-comment">//为req对象，挂载自定义属性，从而把时间共享给后面的所有路由</span><br>    req.<span class="hljs-property">startTime</span> = time<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用/这个路由&#x27;</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;home page&#x27;</span>+ req.<span class="hljs-property">startTime</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用/user这个路由&#x27;</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;user page&#x27;</span>+ req.<span class="hljs-property">startTime</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server runninga at http://localhost:8080&#x27;</span>);<br>&#125;) <br></code></pre></td></tr></table></figure><p>由返回结果可以看到，<strong>先执行中间件，在执行路由。</strong><br><img src="5.png" alt="image.png"><br><strong>定义多个中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br> <br><span class="hljs-comment">//定义第一个全局中间件的简化形式</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一个中间件&#x27;</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br><br><span class="hljs-comment">///定义第二个全局中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二个中间件&#x27;</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用/这个路由&#x27;</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用/user这个路由&#x27;</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;user page&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server runninga at http://localhost:8080&#x27;</span>);<br>&#125;) <br></code></pre></td></tr></table></figure><p>中间件按顺序执行，在执行路由：<br><img src="6.png" alt="image.png"><br><a name="lff2P"></a></p><h4 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h4><p>定义局部中间件，我们不把它放到 app.use()注册那它就是局部中间件，使用方法与全局中间件相同。只是我们想让那个中间件生效，就把他放到那个路由中，一个路由可以使用多个中间件，以顺序或者数组的方式放在 app.get()或 post()的参数中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br> <br><span class="hljs-comment">//局部生效中间件的定义</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw1</span> = (<span class="hljs-params">req, res, next</span>)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用局部生效中间件1&#x27;</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw2</span> = (<span class="hljs-params">req, res, next</span>)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用局部生效中间件2&#x27;</span>);<br>    <span class="hljs-title function_">next</span>()<br>&#125;<br><span class="hljs-comment">//只在当前路由生效</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, mw1, mw2, <span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>,[mw1, mw2], <span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;user page&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server runninga at http://localhost:8080&#x27;</span>);<br>&#125;) <br></code></pre></td></tr></table></figure><p><a name="odnYC"></a></p><h4 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h4><p><strong>1.应用级别的中间件</strong><br>通过app.use()或 app.get(0或 app.post()，绑定到app实例上的中间件，叫做应用级别的中间件。<br><strong>2.路由级别的中间件</strong><br>绑定到express.Router()实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。只不过，应用级别中间件是绑定到app 实例上，路由级别中间件绑定到router实例上。<br><strong>3.错误级别的中间件</strong><br>错误级别中间件的作用:专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。<br>格式:必须有4个形参，形参顺序从前到后，分别是**(err, req, res, next)**。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><br><span class="hljs-comment">//只在当前路由生效</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>  <span class="hljs-comment">//1.1认为制造错误</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;服务器错误&#x27;</span>)<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">//定义错误级别中间件，捕获异常</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);<br>  res.<span class="hljs-title function_">send</span>(err.<span class="hljs-property">message</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server runninga at http://localhost:8080&#x27;</span>);<br>&#125;) <br></code></pre></td></tr></table></figure><p><strong>4.Express内置的中间件</strong></p><ol><li><p><strong>express.static</strong> 快速托管静态资源的内置中间件，例如:HTML文件、图片、CSS样式等(无兼容性)</p></li><li><p><strong>express.json</strong>解析JSON格式的请求体数据（有兼容性，仅在4.16.0+版本中可用)</p></li><li><p><strong>express.urlencoded</strong>解析URL-encoded格式的请求体数据（有兼容性，仅在4.16.0+版本中可用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br> <span class="hljs-comment">//配置解析application/json格式数据的内置中间件  解析JSON数据</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br><br><span class="hljs-comment">//通过express.urlencoded()这个中间件，来解析表单中的 url-encoded 格式的数据</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//服务器使用req.body接收客户端发送的请求体数据</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/book&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;book&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server runninga at http://localhost:8080&#x27;</span>);<br>&#125;) <br></code></pre></td></tr></table></figure><p><strong>5.第三方的中间件</strong><br>非Express官方内置的，而是由第三方开发出来的中间件，叫做第三方中间件。在项目中大家可以按需下载并配置<br>第三方中间件，从而提高项目的开发效率。<br>例如:在<a href="mailto:&#x65;&#120;&#x70;&#114;&#x65;&#x73;&#115;&#x40;&#52;&#x2e;&#x31;&#x36;&#x2e;&#x30;">&#x65;&#120;&#x70;&#114;&#x65;&#x73;&#115;&#x40;&#52;&#x2e;&#x31;&#x36;&#x2e;&#x30;</a>之前的版本中，经常使用body-parser这个第三方中间件，来解析请求体数据。使用步骤如下:</p></li><li><p>运行npm install body-parser安装中间件</p></li><li><p>使用require 导入中间件</p></li><li><p>调用app.use()注册并使用中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">//导入解析表单数据的中间件</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-comment">//注册中间件</span><br>app.<span class="hljs-title function_">use</span>(parser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span>&#125;))<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>&#125;)<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server runninga at http://localhost:8080&#x27;</span>);<br>&#125;) <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>颜值测试小程序</title>
    <link href="/2024/05/30/face/"/>
    <url>/2024/05/30/face/</url>
    
    <content type="html"><![CDATA[<p>最近闲来无事，学习了一些微信小程序的开发，自己也学着做了一个颜值测试的微信小程序，快来一起测测颜值吧！先看看效果：<br><img src="1.jpg" alt="Screenshot_2024-05-30-17-08-21-708_com.tencent.mm.jpg"><br>效果还是可以的嘛，起码猜对了我的性别，但是颜值测得与本人严重不符，明明是很帅的好吧。<br><a name="TJHTO"></a></p><h3 id="1-页面布局"><a href="#1-页面布局" class="headerlink" title="1.页面布局"></a>1.页面布局</h3><p>整个小程序只有一个页面，就是上面的那个，很简单的对吧。看看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!--pages/home/home.<span class="hljs-property">wxml</span>--&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">camera</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: &#123;&#123;wh&#125;&#125;px; width: 100%;&quot;</span> <span class="hljs-attr">flash</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">device-position</span>=<span class="hljs-string">&#x27;&#123;&#123;position&#125;&#125;&#x27;</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;isShow === false&#125;&#125;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/翻转镜头.png&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">bind:tap</span>=<span class="hljs-string">&quot;reverseCamera&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/拍照.png&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">bind:tap</span>=<span class="hljs-string">&quot;takePhoto&quot;</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../images/相册.png&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">bind:tap</span>=<span class="hljs-string">&quot;choosePhoto&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">camera</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:else</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;&#123;&#123;src&#125;&#125;&#x27;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;aspectFill&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; height: &#123;&#123;wh&#125;&#125;px; display: block;&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;faceinfo&quot;</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;isShowBox&#125;&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;face_row&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>颜值分数：&#123;&#123;faceInfo.beauty&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>颜值水平：&#123;&#123;level&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;face_row&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>年龄：&#123;&#123;faceInfo.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>性别：&#123;&#123;map.gender[faceInfo.gender.type]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;face_row&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>表情：&#123;&#123;map.expression[faceInfo.expression.type]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>脸型：&#123;&#123;map.face_shape[faceInfo.face_shape.type]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;face_row&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>眼镜：&#123;&#123;map.glasses[faceInfo.glasses.type]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>情绪：&#123;&#123;map.emotion[faceInfo.emotion.type]&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reChoose&quot;</span> <span class="hljs-attr">bind:tap</span>=<span class="hljs-string">&quot;reChoose&quot;</span>&gt;</span>重选照片<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>开始调用了 camera 标签，打开了摄像头，然后是三个按钮，分别表示镜头反转，拍照，和相册功能，并且绑定了三个函数来实现各自的功能。<br>接下来用一个盒子显示测试的结果，有很多属性，最后有个重选照片的功能，点击后，回到 camera 页面。<br><a name="nVNvr"></a></p><h3 id="2-使用百度-api-接口"><a href="#2-使用百度-api-接口" class="headerlink" title="2.使用百度 api 接口"></a>2.使用百度 api 接口</h3><p>接下拉讲讲它是如何实现颜值测试的。<br>我是调用了百度 ai 开放平台的 API 实现的，具体的方法我就不赘述了，大家可以自行百度。<br>我们现在 app.js 文件中完成鉴权操作，只有鉴权成功，才可以调用 api。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">App</span>(&#123;<br>  <span class="hljs-comment">//全局共享数据</span><br>  <span class="hljs-attr">globalData</span>:&#123;<br>    <span class="hljs-attr">access_token</span>: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">onLaunch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=mVX1mOx5OVzfmEBqT4cRB2GD&amp;client_secret=eU618VFyuX3ph3QflfjxRhBnOD3jNrLq&#x27;</span>,<br>      <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>        <span class="hljs-comment">//console.log(res);</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">globalData</span>.<span class="hljs-property">access_token</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">access_token</span><br>      &#125;,<br>      <span class="hljs-attr">fail</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>        wx.<span class="hljs-title function_">showToast</span>(&#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;鉴权失败!&#x27;</span>,<br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;,<br><br></code></pre></td></tr></table></figure><p>接下来最重要的就是我们获取颜值信息的函数，我们用getFaceInfo()表示。首先进行鉴权，成功之后调用 wx.request()将我们要测试的照片 post 过去，照片的要求是 Base64 格式的，这个注意一下。<br>接着我们在 data 中接收数据，接收成功的数据可以在 AppData 中查看<img src="2.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getFaceInfo</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-comment">// console.log(&#x27;调用测颜值的函数&#x27;);</span><br>    <span class="hljs-keyword">const</span> token = app.<span class="hljs-property">globalData</span>.<span class="hljs-property">access_token</span><br>    <span class="hljs-comment">//console.log(token);</span><br>    <span class="hljs-keyword">if</span>(!token)&#123;<br>      <span class="hljs-keyword">return</span> wx.<span class="hljs-title function_">showToast</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;鉴权失败！&#x27;</span>,<br>      &#125;)<br>    &#125;<br>    wx.<span class="hljs-title function_">showLoading</span>(&#123;<br>      <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;颜值检测中...&#x27;</span><br>    &#125;)<br>    <span class="hljs-comment">//颜值检测</span><br><br>    <span class="hljs-comment">//照片转码位Base64格式</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">FileManager</span> = wx.<span class="hljs-title function_">getFileSystemManager</span>()<br>    <span class="hljs-keyword">const</span> fileStr = <span class="hljs-title class_">FileManager</span>.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">src</span>, <span class="hljs-string">&#x27;base64&#x27;</span>)<br>   <br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://aip.baidubce.com/rest/2.0/face/v3/detect?access_token=&#x27;</span> + token,<br>      <span class="hljs-attr">header</span>:&#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>      &#125;,<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">image_type</span>: <span class="hljs-string">&#x27;BASE64&#x27;</span>,<br>        <span class="hljs-attr">image</span>: fileStr,<br>        <span class="hljs-comment">//          年龄   表情          脸型     性别  眼睛     情绪   颜值分数</span><br>        <span class="hljs-attr">face_field</span>:<span class="hljs-string">&#x27;age,expression,face_shape,gender,glasses,emotion,beauty&#x27;</span><br>      &#125;,<br><br>      <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">result</span>.<span class="hljs-property">face_num</span>&lt;=<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">return</span> wx.<span class="hljs-title function_">showToast</span>(&#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;未检测到人脸&#x27;</span>,<br>          &#125;)<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>          <span class="hljs-attr">faceInfo</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">result</span>.<span class="hljs-property">face_list</span>[<span class="hljs-number">0</span>],<br>          <span class="hljs-attr">isShowBox</span>:<span class="hljs-literal">true</span><br>        &#125;)<br>        <span class="hljs-keyword">const</span> score = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">faceInfo</span>.<span class="hljs-property">beauty</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getLevel</span>(score)<br>        <br>      &#125;,<br>      <span class="hljs-attr">fail</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>        wx.<span class="hljs-title function_">showToast</span>(&#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;颜值检测失败!&#x27;</span>,<br>        &#125;)<br>      &#125;,<br>      <span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>        wx.<span class="hljs-title function_">hideLoading</span>()<br>      &#125;<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><p><a name="u3qQH"></a></p><h3 id="3-数据渲染"><a href="#3-数据渲染" class="headerlink" title="3.数据渲染"></a>3.数据渲染</h3><p>接下来就是我们如何把数据渲染到页面上。在 Page 中，我们用faceInfo 接收人脸信息，返回的是一个对象。由于返回的数据都是数组或者英文，我们需要把他们转换成中文，比如 male 转换成 男，female 转换成女。<br> 于是我们可以使用 map 方法存储中英文的映射关系，这样就能一一对应了，使用**map.gender[faceInfo.gender.type] **方法将英文转换为中文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">/**<br>   * 页面的初始数据<br>   */<br>  data: &#123;<br>    //视口高度<br>    wh:0,<br>      //摄像头朝向<br>      position:&#x27;front&#x27;,<br>      //照片路径<br>      src:&#x27;&#x27;,<br>      //是否展示照片<br>      isShow: false,<br>      //人脸信息<br>      faceInfo: null,<br>      //颜值水平<br>      level: null,<br>      isShowBox:false,<br>      //中英文映射关系<br>      map:&#123;<br>      gender:&#123;<br>        male: &#x27;男&#x27;,female: &#x27;女&#x27;<br>      &#125;,<br>      expression:&#123;<br>        none:&#x27;不笑&#x27;,smile:&#x27;微笑&#x27;,laugh:&#x27;大笑&#x27;<br>      &#125;,<br>      face_shape:&#123;<br>        square: &#x27;正方形&#x27;, triangle:&#x27;三角形&#x27;, oval: &#x27;椭圆&#x27;, heart: &#x27;心形&#x27;, round: &#x27;圆形&#x27;<br>      &#125;,<br>      glasses:&#123;<br>        none:&#x27;无眼镜&#x27;,common:&#x27;普通眼镜&#x27;,sun:&#x27;墨镜&#x27;<br>      &#125;,<br>      emotion:&#123;<br>        angry:&#x27;愤怒&#x27;, disgust:&#x27;厌恶&#x27;, fear:&#x27;恐惧&#x27;, happy:&#x27;高兴&#x27;, sad:&#x27;伤心&#x27;, surprise:&#x27;惊讶&#x27;, neutral:&#x27;无表情&#x27;, pouty: &#x27;撅嘴&#x27;, grimace:&#x27;鬼脸&#x27;<br>      &#125;,<br>    &#125;<br>  &#125;,<br><br></code></pre></td></tr></table></figure><p>至此，我的颜值测试小程序就写完了，你也来试试吧！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Express(一)学习前课—HTTP</title>
    <link href="/2024/05/30/express1/"/>
    <url>/2024/05/30/express1/</url>
    
    <content type="html"><![CDATA[<p>最近在学习 node.js，学到了 Express，直到我们可以利用 Express 自己搭建服务器，那么在正式学习 Express 之前，我们先学习一下 node 内置的 HTTP，它也可以搭建服务器，实现前后端交互。<br><a name="a9TrB"></a></p><h3 id="1-认识-HTTP"><a href="#1-认识-HTTP" class="headerlink" title="1.认识 HTTP"></a>1.认识 HTTP</h3><p>回顾:什么是客户端、什么是服务器?</p><ul><li>在网络节点中，负责消费资源的电脑，叫做<strong>客户端</strong>;</li><li>负责对外提供网络资源的电脑，叫做<strong>服务器</strong>。</li></ul><p>http模块是Nodejs 官方提供的、用来创建web服务器的模块。通过 http模块提供的 **http.createServer()**方法，就能方便的把一台普通的电脑，变成一台Web 服务器，从而对外提供 Web资源服务。<br>服务器和普通电脑的区别在于，服务器上安装了web服务器软件，例如:lIS、Apache等。通过安装这些服务器软件，就能把一台普通的电脑变成一台web 服务器。<br>在Nodejs 中，我们不需要使用IIS、Apache等这些第三方web服务器软件。因为我们可以基于Node.js提供的http模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供web服务。<br>在了解 http 时，我们还需要知道 <strong>IP，域名，端口</strong>的概念，这对我们至关重要。<br><a name="V9wMj"></a></p><h4 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="1.IP地址"></a>1.IP地址</h4><p>IP地址就是互联网上每台计算机的唯一地址，因此IP地址具有唯一性（但是 IP 地址是可以更改的）。如果把“个人电脑”比作“一台电话”，那么“IP地址”就相当于“电话号码”，只有在知道对方IP地址的前提下，才能与对应的电脑之间进行数据通信。<br>IP地址的格式:通常用“点分十进制”表示成(a.b.c.d)的形式，其中,a,b,c,d都是0~255之间的十进制整数。例如:用点分十进表示的IP地址(192.168.1.1)<br>注意:</p><ul><li>互联网中每台Web服务器，都有自己的IP地址，例如:大家可以在Windows 的终端中运行ping <a href="http://www.baidu.com命令,即可查看到百度服务器的ip地址./">www.baidu.com命令，即可查看到百度服务器的IP地址。</a></li><li>在开发期间，自己的电脑既是一台服务器，也是一个客户端，为了方便测试，可以在自己的浏览器中输入127.0.0.1这个IP地址，就能把自己的电脑当做一台服务器进行访问了。<br><a name="gxegP"></a></li></ul><h4 id="2-域名和域名服务器"><a href="#2-域名和域名服务器" class="headerlink" title="2.域名和域名服务器"></a>2.域名和域名服务器</h4><p>尽管IР地址能够唯一地标记网络上的计算机，但IP地址是一长串数字，不直观，而且不便于记忆，于是人们又发明了另一套字符型的地址方案，即所谓的域名(Domain Name)地址。<br>IP地址和域名是——对应的关系，这份对应关系存放在一种叫做域名服务器(DNS，Domain name server)的电脑中。使用者只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，域名服务器就是提供IP地址和域名之间的转换服务的服务器。<br>注意:</p><ul><li>单纯使用IP地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便。</li><li>在开发测试期间，127.0.0.1对应的域名是localhost，它们都代表我们自己的这台电脑，在使用效果上没有任何区别。<br><a name="k2CR5"></a></li></ul><h4 id="3-端口号"><a href="#3-端口号" class="headerlink" title="3.端口号"></a>3.端口号</h4><p>计算机中的端口号，就好像是现实生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确把外卖送到你的手中。<br>同样的道理，在一台电脑中，可以运行成百上千个web服务。每个web服务都对应一个唯一的端口号。客户端发送过来的网络请求，通过端口号，可以被准确地交给对应的web服务进行处理。<br>注意:</p><ul><li>每个端口号不能同时被多个web 服务占用。</li><li>在实际应用中，URL中的80端口可以被省略。<br><a name="SKkG5"></a></li></ul><h3 id="2-创建一个最基本的服务器"><a href="#2-创建一个最基本的服务器" class="headerlink" title="2.创建一个最基本的服务器"></a>2.创建一个最基本的服务器</h3><p>步骤：</p><ol><li>导入 http模块</li><li>创建web 服务器实例</li><li>为服务器实例绑定request事件</li><li>监听客户端的请求启动服务器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.导入http模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-comment">//2.创建web服务器实例</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><br><span class="hljs-comment">//3.为服务器绑定request案例，监听客户端的请求</span><br><span class="hljs-comment">// req是请求对象，res是响应对象</span><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Someone visit our web server.&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">//4.启动服务器，端口号为8080</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>以上我们就创建了一个最基本的服务器并启动它。<br><img src="1.png"><br><a name="chHNz"></a></li></ol><h3 id="3-req-与-res"><a href="#3-req-与-res" class="headerlink" title="3.req 与 res"></a>3.req 与 res</h3><p>刚才我们讲到 req 是请求对象，res 是响应对象。只要服务器接收到了客户端的请求，就会调用通过server.on()为服务器绑定的request事件处理函数。我们通过一个小例子来了解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><span class="hljs-comment">// req是请求对象，包含了与客户端相关数据属性</span><br><span class="hljs-comment">// res是响应对象，</span><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//req.url 是客户端请求的URL 地址</span><br>    <span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br>    <span class="hljs-comment">//req.method 是客户端请求的方法</span><br>    <span class="hljs-keyword">const</span> method  = req.<span class="hljs-property">method</span><br><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">`Your request url is <span class="hljs-subst">$&#123;url&#125;</span>, and request method is <span class="hljs-subst">$&#123;method&#125;</span>`</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br>   <br>    <span class="hljs-comment">//调用res.end()方法，向客户端响应一些内容,结束这次请求过程</span><br>    res.<span class="hljs-title function_">end</span>(str)<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>req 是请求对象，我们就可以通过 req.url 和 req.method 获得请求的 url 地址和 请求方法；res 是响应对象，res.end()是一个响应方法，可以向客户端响应一些内容,结束这次请求过程。<br><img src="2.png"><br>如果我们向 res.end()中发送中文的话，可能会出现乱码，我们需要手动设置编码格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>)=&gt;</span> &#123;<br>    <span class="hljs-comment">//定义中文字符串</span><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">`您请求的URL地址是<span class="hljs-subst">$&#123;req.url&#125;</span>, 请求的方法是<span class="hljs-subst">$&#123;req.method&#125;</span>。`</span><br>    <span class="hljs-comment">// 防止中文乱码，调用res.setHeader()方法，需要设置Content-type响应头 </span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>)<br>    res.<span class="hljs-title function_">end</span>(str)<br>    &#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">()=&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p><a name="zo6GQ"></a></p><h3 id="4-根据不同的-url-响应不同的内容"><a href="#4-根据不同的-url-响应不同的内容" class="headerlink" title="4.根据不同的 url 响应不同的内容"></a>4.根据不同的 url 响应不同的内容</h3><p>有时我们需要通过不同的 url 来返回不同的 html 内容，可以通过下面的方法：</p><ol><li>获取请求的url地址</li><li>设置默认的响应内容为404 Not found</li><li>判断用户请求的是否为&#x2F;或&#x2F;index.html首页</li><li>判断用户请求的是否为&#x2F;about.html关于页面</li><li>设置Content-Type响应头，防止中文乱码使用res.end(）把内容响应给客户端<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//1.获取请求的url地址</span><br>    <span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br>    <span class="hljs-comment">//2.设置默认的响应内容为 404</span><br>    <span class="hljs-keyword">let</span> content = <span class="hljs-string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span><br><br>    <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/&#x27;</span> || url === <span class="hljs-string">&#x27;/index.html&#x27;</span>) &#123;<br>        content = <span class="hljs-string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/about.html&#x27;</span>) &#123;<br>        content = <span class="hljs-string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span><br>    &#125;<br><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>)<br>    res.<span class="hljs-title function_">end</span>(content)<br>&#125;)<br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running at http://127.0.0.1:8080&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>以上我们就基本学会了如何使用 http 搭建简单的服务器，下一节我们就正式进入 Express 的学习了，并会了解到使用 Express 搭建服务器比原生 http 的优点，敬请期待吧。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>实验1--A*搜索算法求解罗马尼亚问题</title>
    <link href="/2024/04/06/A-search/"/>
    <url>/2024/04/06/A-search/</url>
    
    <content type="html"><![CDATA[<p><a name="bX1w5"></a></p><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><ul><li>掌握有信息搜索策略的算法思想；</li><li>能够编程实现搜索算法；</li><li>应用A*搜索算法求解罗马尼亚问题。<br><a name="K8hhL"></a></li></ul><h2 id="二、相关知识-A-搜索"><a href="#二、相关知识-A-搜索" class="headerlink" title="二、相关知识-A*搜索"></a>二、相关知识-A*搜索</h2><p><a name="HWODj"></a></p><h5 id="A-搜索"><a href="#A-搜索" class="headerlink" title="A*搜索"></a>A*搜索</h5><ul><li>算法介绍</li></ul><p>A*算法常用于 <strong>二维地图路径规划</strong>，算法所采用的启发式搜索可以利用实际问题所具备的启发式信息来指导搜索，从而减少搜索范围，控制搜索规模，降低实际问题的复杂度。</p><ul><li>算法原理：</li></ul><p>A*算法的原理是设计一个代价估计函数：其中 **评估函数F(n)**是从起始节点通过节点n的到达目标节点的最小代价路径的估计值，函数G(n)是从起始节点到n节点的已走过路径的实际代价，函数H(n)是从n节点到目标节点可能的最优路径的估计代价 。<br>函数 H(n)表明了算法使用的启发信息，它来源于人们对路径规划问题的认识，依赖某种经验估计。根据 F(n)可以计算出当前节点的代价，并可以对下一次能够到达的节点进行评估。<br>采用每次搜索都找到代价值最小的点再继续往外搜索的过程，一步一步找到最优路径。<br><a name="lwVNy"></a></p><h2 id="三、实验内容及步骤"><a href="#三、实验内容及步骤" class="headerlink" title="三、实验内容及步骤"></a>三、实验内容及步骤</h2><p><a name="NbAHx"></a></p><h3 id="题目：罗马尼亚问题"><a href="#题目：罗马尼亚问题" class="headerlink" title="题目：罗马尼亚问题"></a>题目：罗马尼亚问题</h3><p>  agent在罗马尼亚度假，目前位于 Arad 城市。agent明天有航班从Bucharest 起飞，不能改签退票。<br>        现在你需要寻找到 Bucharest 的最短路径，在右侧编辑器补充void A_star(int goal,node &amp;src,Graph &amp;graph)函数，使用编写的搜索算法代码求解罗马尼亚问题：<br><img src="1.png" alt="image.png"><br>预期输出：<br>solution: 0-&gt; 15-&gt; 14-&gt; 13-&gt; 1-&gt; end<br>cost:418<br><a name="liqmb"></a></p><h3 id="1-创建搜索树"><a href="#1-创建搜索树" class="headerlink" title="1.创建搜索树"></a>1.创建搜索树</h3><p>给每个城市编号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> A 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> B 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> D 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> E 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> F 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> G 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 11</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> O 12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> P 13</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R 14</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S 15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> T 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> U 17</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> V 18</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Z 19</span><br></code></pre></td></tr></table></figure><p>根据启发式函数 f(n)&#x3D;g(n)+h(n)，我们用直线距离表示每个城市到终点的预计代价，存储到数组 h 中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> h[<span class="hljs-number">20</span>] =<br>&#123; <span class="hljs-number">366</span>,<span class="hljs-number">0</span>,<span class="hljs-number">160</span>,<span class="hljs-number">242</span>,<span class="hljs-number">161</span>,<br><span class="hljs-number">178</span>,<span class="hljs-number">77</span>,<span class="hljs-number">151</span>,<span class="hljs-number">226</span>,<span class="hljs-number">244</span>,<br><span class="hljs-number">241</span>,<span class="hljs-number">234</span>,<span class="hljs-number">380</span>,<span class="hljs-number">98</span>,<span class="hljs-number">193</span>,<br><span class="hljs-number">253</span>,<span class="hljs-number">329</span>,<span class="hljs-number">80</span>,<span class="hljs-number">199</span>,<span class="hljs-number">374</span> &#125;;<br></code></pre></td></tr></table></figure><p>我们定义了节点结构体 <strong>node</strong>，用于表示图中的每个节点，其中包括节点名称 <strong>name</strong>，实际代价 <strong>g</strong>，启发式代价 <strong>h</strong>，以及总代价 <strong>f</strong>。总代价 <strong>f</strong> 是启发式代价和实际代价的和，用于 A* 算法中的优先级排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> g;                              <span class="hljs-comment">//从起始节点到n节点的已走过路径的实际代价</span><br>    <span class="hljs-type">int</span> h;                              <span class="hljs-comment">//从n节点到目标节点可能的最优路径的估计代价</span><br>    <span class="hljs-type">int</span> f;                              <span class="hljs-comment">//代价估计函数</span><br>    <span class="hljs-type">int</span> name;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> name, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> h) &#123;       <span class="hljs-comment">//构造函数</span><br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>        <span class="hljs-keyword">this</span>-&gt;g = g;<br>        <span class="hljs-keyword">this</span>-&gt;h = h;<br>        <span class="hljs-keyword">this</span>-&gt;f = g + h;<br>    &#125;;<br><br>    <span class="hljs-comment">//重载运算符</span><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> node&amp; a)<span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> f &lt; a.f; &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后是 <strong>Graph</strong> 类，用于表示图，其中包括一个邻接矩阵来存储节点之间的边的权重。这里使用了一个 20x20 的邻接矩阵，表示 20 个城市之间的关系。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Graph</span>()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(graph, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(graph)); <span class="hljs-comment">// 初始化邻接矩阵</span><br>    &#125;<br>    <span class="hljs-comment">// 获取两个节点之间的边的权重</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> graph[from][to];<br>    &#125;<br>    <span class="hljs-comment">// 添加边</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to, <span class="hljs-type">int</span> cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (from &gt;= <span class="hljs-number">20</span> || from &lt; <span class="hljs-number">0</span> || to &gt;= <span class="hljs-number">20</span> || to &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span>;<br>        graph[from][to] = cost;<br>    &#125;<br><span class="hljs-comment">// 初始化图的边</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 添加边</span><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> graph[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>]; <span class="hljs-comment">// 邻接矩阵</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>最后，<strong>print_result</strong> 函数用于打印最终结果，包括路径和总代价。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_result</span><span class="hljs-params">(Graph &amp;graph)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = openList[<span class="hljs-number">0</span>].name;<br>    <span class="hljs-type">int</span> lastNodeNum;<br>    road.<span class="hljs-built_in">push</span>(p);<br>    <span class="hljs-keyword">while</span> (parent[p] != <span class="hljs-number">-1</span>)<br>    &#123;<br>        road.<span class="hljs-built_in">push</span>(parent[p]);<br>        p = parent[p];<br>    &#125;<br>    lastNodeNum = road.<span class="hljs-built_in">top</span>();<br>    <span class="hljs-type">int</span> cost = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;solution: &quot;</span>;<br>    <span class="hljs-keyword">while</span> (!road.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout &lt;&lt; road.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot;-&gt; &quot;</span>;<br>        <span class="hljs-keyword">if</span> (road.<span class="hljs-built_in">top</span>() != lastNodeNum)<br>        &#123;<br>            cost += graph.<span class="hljs-built_in">getEdge</span>(lastNodeNum, road.<span class="hljs-built_in">top</span>());<br>            lastNodeNum = road.<span class="hljs-built_in">top</span>();<br>        &#125;<br>        road.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;end&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;cost:&quot;</span> &lt;&lt; cost;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mBamQ"></a></p><h3 id="2-实现A-搜索算法"><a href="#2-实现A-搜索算法" class="headerlink" title="2.实现A*搜索算法"></a>2.实现A*搜索算法</h3><ol><li><strong>初始化</strong>：<ul><li>开始时，将起始节点放入开放列表 <strong>openList</strong> 中，然后按照节点的总代价 <strong>f</strong> 进行排序。</li><li>初始化闭合列表 <strong>closeList</strong> 和标记列表 <strong>list</strong>。</li></ul></li><li><strong>搜索过程</strong>：<ul><li>在每一轮循环中，从开放列表中选择总代价最小的节点进行扩展，即取出开放列表中的第一个节点 <strong>n</strong>。</li><li>如果节点 <strong>n</strong> 是目标节点，则搜索结束。</li><li>将节点 <strong>n</strong> 标记为已扩展，并从开放列表中移除。</li><li>遍历节点 <strong>n</strong> 的邻居节点：<ul><li>如果邻居节点已经在闭合列表中，则跳过。</li><li>计算从起始节点经过节点 <strong>n</strong> 到邻居节点的总代价。</li><li>如果邻居节点已经在开放列表中：<ul><li>如果新路径的代价比原路径的代价更小，则更新邻居节点的代价和父节点，并重新计算总代价。</li></ul></li><li>如果邻居节点不在开放列表中：<ul><li>创建一个新的节点表示新路径，将其加入到开放列表中，并更新父节点和标记列表。</li></ul></li></ul></li><li>在每轮循环结束时，重新对开放列表按总代价进行排序，以确保下一轮选择的节点总代价最小。</li></ul></li><li><strong>搜索结束</strong>：<ul><li>当搜索到达目标节点时，返回结果。</li><li>可以根据父节点信息回溯路径，并计算总代价。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A_star</span><span class="hljs-params">(<span class="hljs-type">int</span> goal,node &amp;src,Graph &amp;graph)</span></span><br><span class="hljs-function"></span>&#123;<br>    openList.<span class="hljs-built_in">push_back</span>(src); <span class="hljs-comment">//起点入队</span><br>    <span class="hljs-built_in">sort</span>(openList.<span class="hljs-built_in">begin</span>(), openList.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">while</span> (!openList.<span class="hljs-built_in">empty</span>())<span class="hljs-comment">//队列中还有可扩展节点，就不断扩展</span><br>    &#123;<br>        <span class="hljs-comment">/********** Begin **********/</span><br>        node n=openList[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(n.name==goal) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//扩展节点是目标节点，搜索结束</span><br>        openList.<span class="hljs-built_in">erase</span>(openList.<span class="hljs-built_in">begin</span>());<br>        closeList[n.name]=<span class="hljs-number">1</span>; <span class="hljs-comment">//当前节点已扩展</span><br>        list[n.name]=<span class="hljs-number">0</span>; <span class="hljs-comment">//当前节点出队</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(graph.<span class="hljs-built_in">getEdge</span>(n.name,i)!=<span class="hljs-number">-1</span> &amp;&amp; closeList[i]!=<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-type">int</span> cost=n.g+graph.<span class="hljs-built_in">getEdge</span>(n.name,i);<span class="hljs-comment">//到下一个城市的代价</span><br>                <span class="hljs-keyword">if</span>(list[i])&#123;<br>                    <span class="hljs-comment">//更新已有节点</span><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;openList.<span class="hljs-built_in">size</span>();j++)&#123;<br>                        <span class="hljs-keyword">if</span>(openList[j].name==i)&#123;<br>                            <span class="hljs-keyword">if</span>(openList[j].g&gt;cost)&#123;<br>                                openList[j].g=cost;<br>                                openList[j].f=cost+openList[j].h;<br>                                parent[i]=n.name;<br>                            &#125;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//构造新节点</span><br>                    node <span class="hljs-built_in">newNode</span>(i,cost,h[i]);<br>                    openList.<span class="hljs-built_in">push_back</span>(newNode);<br>                    list[i]=<span class="hljs-number">1</span>;<br>                    parent[i]=n.name;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(openList.<span class="hljs-built_in">begin</span>(),openList.<span class="hljs-built_in">end</span>());  <br>        <span class="hljs-comment">/********** End **********/</span>  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>解空间树：<br><img src="2.jpg" alt="IMG_20240404_230640.jpg"><br><a name="BuS8i"></a></li></ul></li></ol><h3 id="3-使用编写的搜索算法代码求解罗马尼亚问题"><a href="#3-使用编写的搜索算法代码求解罗马尼亚问题" class="headerlink" title="3.使用编写的搜索算法代码求解罗马尼亚问题"></a>3.使用编写的搜索算法代码求解罗马尼亚问题</h3><p><img src="3.png" alt="image.png"><br><a name="sBdCA"></a></p><h3 id="4-分析算法的时间复杂度"><a href="#4-分析算法的时间复杂度" class="headerlink" title="4.分析算法的时间复杂度"></a>4.分析算法的时间复杂度</h3><p>启发式函数的的绝对误差定义为<img src="4.png">，其中 h<em>是从根节点到目标节点的实际代价，相对误差定义为<img src="5.png">。<br>A</em>的时间复杂度在最大绝对误差下是指数级的，为<img src="6.png">，考虑每步代价均为常量<img src="7.png">，其中 d 是解所在深度。<br><a name="IMfTY"></a></p><h2 id="四、思考题"><a href="#四、思考题" class="headerlink" title="四、思考题"></a>四、思考题</h2><p><a name="Re6zN"></a></p><h3 id="1-几种搜索算法最优性的比较"><a href="#1-几种搜索算法最优性的比较" class="headerlink" title="1.几种搜索算法最优性的比较"></a>1.几种搜索算法最优性的比较</h3><p>宽度优先搜索，深度优先搜索，一致代价搜索，迭代加深的深度优先搜索算法哪种方法最优？<br>ε每步行动代价都相等时，宽度优先搜索和迭代加深的深度优先搜索最优，否则一致搜索代价算法最优<br>宽度优先算法：</p><ul><li>完备性：在最浅的目标处于有限深度时是完备的；</li><li>最优性：路径代价基于结点深度的非递减函数时才是最优的，最典型的就是行动代价相等的情况；</li><li>迭代加深的深度优先搜索类似，且二者时间复杂度与空间复杂度也相同。</li></ul><p>一致代价搜索：最优的；</p><ul><li>扩展路径消耗最小的结点，由于代价非负，第一个被扩展的目标结点一定是最优解。</li><li>但可能会探索代价小的行动的搜索树，开销更大。</li></ul><p>深度优先搜索：既不是完备的，也不是最优的。<br><a name="P4duN"></a></p><h3 id="2-贪婪最佳优先搜索和A-搜索那种方法最优？"><a href="#2-贪婪最佳优先搜索和A-搜索那种方法最优？" class="headerlink" title="2.贪婪最佳优先搜索和A*搜索那种方法最优？"></a>2.贪婪最佳优先搜索和A*搜索那种方法最优？</h3><p>A*搜索算法是最优的。</p><ul><li><strong>贪婪最佳优先搜索</strong>：不具有完备性，也不具有最优性，是否找到最优解与启发式函数有关。</li><li><strong>A*搜索算法</strong>：<ul><li>最优性：满足可采纳性和一致性就是最优的；</li><li>完备性：只要分支是有限的就是完备的。<br><a name="he1j1"></a></li></ul></li></ul><h3 id="3-分析比较无信息搜索策略和有信息搜索策略"><a href="#3-分析比较无信息搜索策略和有信息搜索策略" class="headerlink" title="3.分析比较无信息搜索策略和有信息搜索策略"></a>3.分析比较无信息搜索策略和有信息搜索策略</h3><p>无信息搜索策略：</p><ul><li>缺点：盲目的搜索，可能需要较大的时间开销和空间开销才能找到解；</li><li>优点：具有好的通用性。</li></ul><p>有信息搜索策略：</p><ul><li>缺点：性能与启发式函数的质量有关</li><li>优点：通过启发式函数利用问题的额外信息，在搜索过程中向着可能有最优解的方向推进，能够提高搜索效率。<br><a name="QmBDt"></a></li></ul><h2 id="五、代码汇总"><a href="#五、代码汇总" class="headerlink" title="五、代码汇总"></a>五、代码汇总</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;memory.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> A 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> B 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> C 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> D 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> E 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> F 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> G 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> L 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 11</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> O 12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> P 13</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> R 14</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S 15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> T 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> U 17</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> V 18</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Z 19</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> h[<span class="hljs-number">20</span>] =<br>&#123; <span class="hljs-number">366</span>,<span class="hljs-number">0</span>,<span class="hljs-number">160</span>,<span class="hljs-number">242</span>,<span class="hljs-number">161</span>,<br><span class="hljs-number">178</span>,<span class="hljs-number">77</span>,<span class="hljs-number">151</span>,<span class="hljs-number">226</span>,<span class="hljs-number">244</span>,<br><span class="hljs-number">241</span>,<span class="hljs-number">234</span>,<span class="hljs-number">380</span>,<span class="hljs-number">98</span>,<span class="hljs-number">193</span>,<br><span class="hljs-number">253</span>,<span class="hljs-number">329</span>,<span class="hljs-number">80</span>,<span class="hljs-number">199</span>,<span class="hljs-number">374</span> &#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> g;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-type">int</span> f;<br>    <span class="hljs-type">int</span> name;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> name, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> h)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>        <span class="hljs-keyword">this</span>-&gt;g = g;<br>        <span class="hljs-keyword">this</span>-&gt;h = h;<br>        <span class="hljs-keyword">this</span>-&gt;f = g + h;<br>    &#125;;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> node &amp;a)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> f &lt; a.f;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Graph</span>()<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(graph, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(graph));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> graph[from][to];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to, <span class="hljs-type">int</span> cost)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (from &gt;= <span class="hljs-number">20</span> || from &lt; <span class="hljs-number">0</span> || to &gt;= <span class="hljs-number">20</span> || to &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span>;<br>        graph[from][to] = cost;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-built_in">addEdge</span>(O, Z, <span class="hljs-number">71</span>);<br>        <span class="hljs-built_in">addEdge</span>(Z, O, <span class="hljs-number">71</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(O, S, <span class="hljs-number">151</span>);<br>        <span class="hljs-built_in">addEdge</span>(S, O, <span class="hljs-number">151</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(Z, A, <span class="hljs-number">75</span>);<br>        <span class="hljs-built_in">addEdge</span>(A, Z, <span class="hljs-number">75</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(A, S, <span class="hljs-number">140</span>);<br>        <span class="hljs-built_in">addEdge</span>(S, A, <span class="hljs-number">140</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(A, T, <span class="hljs-number">118</span>);<br>        <span class="hljs-built_in">addEdge</span>(T, A, <span class="hljs-number">118</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(T, L, <span class="hljs-number">111</span>);<br>        <span class="hljs-built_in">addEdge</span>(L, T, <span class="hljs-number">111</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(L, M, <span class="hljs-number">70</span>);<br>        <span class="hljs-built_in">addEdge</span>(M, L, <span class="hljs-number">70</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(M, D, <span class="hljs-number">75</span>);<br>        <span class="hljs-built_in">addEdge</span>(D, M, <span class="hljs-number">75</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(D, C, <span class="hljs-number">120</span>);<br>        <span class="hljs-built_in">addEdge</span>(C, D, <span class="hljs-number">120</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(C, R, <span class="hljs-number">146</span>);<br>        <span class="hljs-built_in">addEdge</span>(R, C, <span class="hljs-number">146</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(S, R, <span class="hljs-number">80</span>);<br>        <span class="hljs-built_in">addEdge</span>(R, S, <span class="hljs-number">80</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(S, F, <span class="hljs-number">99</span>);<br>        <span class="hljs-built_in">addEdge</span>(F, S, <span class="hljs-number">99</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(F, B, <span class="hljs-number">211</span>);<br>        <span class="hljs-built_in">addEdge</span>(B, F, <span class="hljs-number">211</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(P, C, <span class="hljs-number">138</span>);<br>        <span class="hljs-built_in">addEdge</span>(C, P, <span class="hljs-number">138</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(R, P, <span class="hljs-number">97</span>);<br>        <span class="hljs-built_in">addEdge</span>(P, R, <span class="hljs-number">97</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(P, B, <span class="hljs-number">101</span>);<br>        <span class="hljs-built_in">addEdge</span>(B, P, <span class="hljs-number">101</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(B, G, <span class="hljs-number">90</span>);<br>        <span class="hljs-built_in">addEdge</span>(G, B, <span class="hljs-number">90</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(B, U, <span class="hljs-number">85</span>);<br>        <span class="hljs-built_in">addEdge</span>(U, B, <span class="hljs-number">85</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(U, H, <span class="hljs-number">98</span>);<br>        <span class="hljs-built_in">addEdge</span>(H, U, <span class="hljs-number">98</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(H, E, <span class="hljs-number">86</span>);<br>        <span class="hljs-built_in">addEdge</span>(E, H, <span class="hljs-number">86</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(U, V, <span class="hljs-number">142</span>);<br>        <span class="hljs-built_in">addEdge</span>(V, U, <span class="hljs-number">142</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(I, V, <span class="hljs-number">92</span>);<br>        <span class="hljs-built_in">addEdge</span>(V, I, <span class="hljs-number">92</span>);<br><br>        <span class="hljs-built_in">addEdge</span>(I, N, <span class="hljs-number">87</span>);<br>        <span class="hljs-built_in">addEdge</span>(N, I, <span class="hljs-number">87</span>);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> graph[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br>&#125;;<br><br><span class="hljs-type">bool</span> list[<span class="hljs-number">20</span>]; <span class="hljs-comment">//记录节点是否在当前队列中</span><br>vector&lt;node&gt; openList;<span class="hljs-comment">//扩展队列</span><br><span class="hljs-type">bool</span> closeList[<span class="hljs-number">20</span>];<span class="hljs-comment">//记录节点是否被扩展（选择）过</span><br>stack&lt;<span class="hljs-type">int</span>&gt; road;<span class="hljs-comment">//记录路径</span><br><span class="hljs-type">int</span> parent[<span class="hljs-number">20</span>];<span class="hljs-comment">//记录路径</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A_star</span><span class="hljs-params">(<span class="hljs-type">int</span> goal,node &amp;src,Graph &amp;graph)</span></span><br><span class="hljs-function"></span>&#123;<br>    openList.<span class="hljs-built_in">push_back</span>(src); <span class="hljs-comment">//起点入队</span><br>    <span class="hljs-built_in">sort</span>(openList.<span class="hljs-built_in">begin</span>(), openList.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-keyword">while</span> (!openList.<span class="hljs-built_in">empty</span>())<span class="hljs-comment">//队列中还有可扩展节点，就不断扩展</span><br>    &#123;<br>        <span class="hljs-comment">/********** Begin **********/</span><br>        node n=openList[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(n.name==goal) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//扩展节点是目标节点，搜索结束</span><br>        openList.<span class="hljs-built_in">erase</span>(openList.<span class="hljs-built_in">begin</span>());<br>        closeList[n.name]=<span class="hljs-number">1</span>; <span class="hljs-comment">//当前节点已扩展</span><br>        list[n.name]=<span class="hljs-number">0</span>; <span class="hljs-comment">//当前节点出队</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(graph.<span class="hljs-built_in">getEdge</span>(n.name,i)!=<span class="hljs-number">-1</span> &amp;&amp; closeList[i]!=<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-type">int</span> cost=n.g+graph.<span class="hljs-built_in">getEdge</span>(n.name,i);<span class="hljs-comment">//到下一个城市的代价</span><br>                <span class="hljs-keyword">if</span>(list[i])&#123;<br>                    <span class="hljs-comment">//更新已有节点</span><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;openList.<span class="hljs-built_in">size</span>();j++)&#123;<br>                        <span class="hljs-keyword">if</span>(openList[j].name==i)&#123;<br>                            <span class="hljs-keyword">if</span>(openList[j].g&gt;cost)&#123;<br>                                openList[j].g=cost;<br>                                openList[j].f=cost+openList[j].h;<br>                                parent[i]=n.name;<br>                            &#125;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//构造新节点</span><br>                    node <span class="hljs-built_in">newNode</span>(i,cost,h[i]);<br>                    openList.<span class="hljs-built_in">push_back</span>(newNode);<br>                    list[i]=<span class="hljs-number">1</span>;<br>                    parent[i]=n.name;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(openList.<span class="hljs-built_in">begin</span>(),openList.<span class="hljs-built_in">end</span>());  <br>        <span class="hljs-comment">/********** End **********/</span>  <br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_result</span><span class="hljs-params">(Graph &amp;graph)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = openList[<span class="hljs-number">0</span>].name;<br>    <span class="hljs-type">int</span> lastNodeNum;<br>    road.<span class="hljs-built_in">push</span>(p);<br>    <span class="hljs-keyword">while</span> (parent[p] != <span class="hljs-number">-1</span>)<br>    &#123;<br>        road.<span class="hljs-built_in">push</span>(parent[p]);<br>        p = parent[p];<br>    &#125;<br>    lastNodeNum = road.<span class="hljs-built_in">top</span>();<br>    <span class="hljs-type">int</span> cost = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;solution: &quot;</span>;<br>    <span class="hljs-keyword">while</span> (!road.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout &lt;&lt; road.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot;-&gt; &quot;</span>;<br>        <span class="hljs-keyword">if</span> (road.<span class="hljs-built_in">top</span>() != lastNodeNum)<br>        &#123;<br>            cost += graph.<span class="hljs-built_in">getEdge</span>(lastNodeNum, road.<span class="hljs-built_in">top</span>());<br>            lastNodeNum = road.<span class="hljs-built_in">top</span>();<br>        &#125;<br>        road.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;end&quot;</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;cost:&quot;</span> &lt;&lt; cost;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>小区物业后台管理系统</title>
    <link href="/2024/04/06/myapp/"/>
    <url>/2024/04/06/myapp/</url>
    
    <content type="html"><![CDATA[<p><a name="XBlGu"></a></p><h2 id="一-项目介绍"><a href="#一-项目介绍" class="headerlink" title="一.项目介绍"></a>一.项目介绍</h2><p>本项目基于 Vue3+Element UI 完成了小区后台管理系统，其中包括<strong>登录与注册</strong>模块，<strong>用户信息列表</strong>模块，<strong>用户信息修改</strong>模块，<strong>可视化统计表展示</strong>模块以及<strong>支付页面</strong>模块。<br><a name="f1SFr"></a></p><h2 id="二-登录与注册"><a href="#二-登录与注册" class="headerlink" title="二.登录与注册"></a>二.登录与注册</h2><p>登录与注册模块：<br><img src="1.png" alt="image.png"><br><a name="sEkJE"></a></p><h3 id="1-ajax"><a href="#1-ajax" class="headerlink" title="1.ajax"></a>1.ajax</h3><p>我们在 util 文件夹，创建 <strong>axios 实例</strong>发送异步请求，并且添加请求拦截器和响应拦截器，以便在发起请求和接收响应时进行一些通用的处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install axios --save<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">import axios from &#x27;axios&#x27;<br>let axiosurl = &quot;&quot;<br>if(process.env.NODE_ENV === &quot;development&quot;)&#123;<br>    axiosurl = process.env.VUE_APP_API<br>&#125;<br> else &#123;<br>    axiosurl = process.env.VUE_APP_API<br> &#125;<br><br>//创建axios实例<br>const service  = axios.create(&#123;<br>    baseURL:axiosurl<br>&#125;)<br>// 添加请求拦截器<br>axios.interceptors.request.use(function (config) &#123;<br>    // 在发送请求之前做些什么<br>    return config;<br>  &#125;, function (error) &#123;<br>    // 对请求错误做些什么<br>    return Promise.reject(error);<br>  &#125;);<br><br>// 添加响应拦截器<br>axios.interceptors.response.use(function (response) &#123;<br>    // 2xx 范围内的状态码都会触发该函数。<br>    // 对响应数据做点什么<br>    return response;<br>  &#125;, function (error) &#123;<br>    // 超出 2xx 范围的状态码都会触发该函数。<br>    // 对响应错误做点什么<br>    console.log(&#x27;error&#x27;, error);<br>    return Promise.reject(error);<br>  &#125;);<br><br>  export default service<br></code></pre></td></tr></table></figure><p>然后在 API 文件夹下创建封装数据请求的函数 link。通过之前定义的 Axios 实例 <strong>service</strong> 发起 HTTP 请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">import service from &quot;../util/service&quot; <br>//封装相关数据请求<br>let link=(url,method=&quot;get&quot;,data,params)=&gt;&#123;<br>    return  new Promise((resolve, reject)=&gt;&#123;<br>        service.request(&#123;<br>            url,<br>            method,<br>            data,<br>            params<br>        &#125;).then((ok)=&gt;&#123;<br>            resolve(ok)<br>        &#125;).catch((err)=&gt;&#123;<br>            reject(err)<br>        &#125;)<br>    &#125;)<br>&#125;<br><br>export default link<br></code></pre></td></tr></table></figure><p>前端的 ajax 请求基本封装完了，接下来我们在mock 文件夹下使用下载** json-server** <strong>模拟服务器端接口数据，</strong>这样可以不依赖后端 API 进行开发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install -g json-server<br></code></pre></td></tr></table></figure><p>然后可以使用 <strong>npx</strong> 运行 <strong>json-server</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>npx <span class="hljs-type">json</span>-<span class="hljs-keyword">server</span> <span class="hljs-comment">--watch data.json --port 8888</span><br></code></pre></td></tr></table></figure><p>在 package.json 重新命名在启动  **npm run mock **方便<br>服务器启动：<br><img src="2.png" alt="image.png"><br>获取注册数据：<br><img src="3%E3%80%81.png" alt="image.png"><br><a name="BOd1K"></a></p><h3 id="2-js-md5-密码加密"><a href="#2-js-md5-密码加密" class="headerlink" title="2.js-md5 密码加密"></a>2.js-md5 密码加密</h3><p>为了保证登录注册的安全性，我们采用 js-md5 对输入的密码进行加密。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install -D js-md5<br></code></pre></td></tr></table></figure><p>封装 hook 加密：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">import md5 from &quot;js-md5&quot;;<br><br>import &#123; ref &#125; from &quot;vue&quot;; <br><br>export default function(data)&#123;<br>    let md5Data = ref(md5(data))<br>    return md5Data<br>&#125;<br></code></pre></td></tr></table></figure><p>对输入的数据我们使用 md5 方法进行加密：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">let data = &#123;<br>          text: ruleForm.text, <br>          pwd: useMd5(ruleForm.pass).value<br>        &#125;<br></code></pre></td></tr></table></figure><p><a name="X9VMe"></a></p><h2 id="三-可视化图表"><a href="#三-可视化图表" class="headerlink" title="三. 可视化图表"></a>三. 可视化图表</h2><p>安装可视化图表库echarts     </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install --save echarts          <br></code></pre></td></tr></table></figure><p>我们先在 App.vue 引入echarts     </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 引入可视化图表库<br>  import * as echarts from &quot;echarts&quot;<br>  import &#123;provide, Provider&#125; from &quot;vue&quot;<br>  provide(&quot;echarts&quot;, echarts)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>再使用 <strong>inject</strong> 函数注入了名为 <strong>$echarts</strong> 的变量，用于获取 ECharts 实例。在 <strong>onMounted</strong> 钩子中，首先通过 <strong>Link</strong> 函数请求了一个 API (<strong>apiUrl.chartData0ne</strong>) 用于获取数据，并将数据分别存储到 <strong>xdata</strong> 和 <strong>ydata</strong> 中。<br>然后初始化 ECharts 实例 <strong>myChart</strong>，并使用 <strong>setOption</strong> 方法设置了图表的配置选项。x 轴的数据使用请求回来的数据，而 y 轴的数据则是固定的，<strong>series</strong> 中定义了图表的类型为柱状图（<strong>bar</strong>），以及柱状图的样式配置，包括颜色渐变和圆角等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h2&gt;人数统计&lt;/h2&gt;<br>        &lt;div class=&quot;chartone&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>    import &#123; inject, onMounted, reactive &#125; from &quot;vue&quot;<br>    import Link from &#x27;../API/Link.js&#x27;<br>    import apiUrl from &#x27;../API/url.js&#x27;<br><br>    let data = reactive(&#123;&#125;)<br>    let xdata = reactive([])<br>    let ydata = reactive([])<br><br>    let $echarts = inject(&quot;echarts&quot;)<br><br>    onMounted(() =&gt; &#123;<br>        let myChart = $echarts.init(document.querySelector(&quot;.chartone&quot;))<br><br>        Link(apiUrl.chartData0ne).then(ok =&gt; &#123;<br>            let &#123; data &#125; = ok<br>            xdata = data.map(v=&gt; v.title)<br>            ydata = data.map(v=&gt; v.num)<br>        &#125;)<br>        myChart.setOption(&#123;<br>            xAxis: &#123;<br>                type: &quot;category&quot;,<br>                data: xdata               <br>            &#125;,<br>            yAxis: &#123;<br>                type: &quot;value&quot;,                 <br>            &#125;,<br>            tooltip:&#123;&#125;,<br>            series: [<br>                &#123;<br>                    type: &quot;bar&quot;,  //定义图表的类型为柱状图                 <br>                    data: ydata,<br>                    itemStyle:&#123;<br>                        normal:&#123;<br>                            barBorderRadius:[20,20,0,0],<br>                            color:new $echarts.graphic.LinearGradient(0,1,0,0,[<br>                                &#123;<br>                                    offset:0,<br>                                    color:&quot;#005eaa&quot;<br>                                &#125;,<br>                                &#123;<br>                                    offset:0.5,<br>                                    color:&quot;#339ca8&quot;<br>                                &#125;,<br>                                &#123;<br>                                    offset:1,<br>                                    color:&quot;#cda819&quot;<br>                                &#125;,<br>                            ])<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            ]<br>        &#125;)<br>    &#125;)<br><br>&lt;/script&gt;<br><br>&lt;style&gt;<br>    h2 &#123;<br>        height: 60px;<br>        color: chocolate;<br>        line-height: 0.6rem;<br>        font-size: 0.25rem;<br>        margin-left:4rem;<br>    &#125;<br>    .chartone &#123;<br>        height: 5rem;<br>    &#125;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="4.png" alt="image.png"><br>我们查询 echarts 官网，根据上面的方法，总共绘制了如下图表：<br><img src="5.png" alt="image.png"><br><a name="Jh7Vk"></a></p><h2 id="三-二维码生成"><a href="#三-二维码生成" class="headerlink" title="三.二维码生成"></a>三.二维码生成</h2><p>安装 qrcodejs2 生成二维码,具体过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm i qrcodejs2 <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;content&quot;&gt;<br>     &lt;div class=&quot;inputDom&quot;&gt;<br>        &lt;el-input v-model=&quot;input&quot; style=&quot;width: 240px&quot; placeholder=&quot;请输入收款金额&quot; /&gt;<br>        &lt;el-button type=&quot;success&quot; @click=&quot;MakeQRcode&quot;&gt;生成二维码&lt;/el-button&gt;<br>     &lt;/div&gt;<br>     &lt;div class=&quot;qrcode&quot; ref=&quot;qrcodeDom&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br> &lt;/template&gt;<br> <br> &lt;script setup&gt;<br>   import &#123;ref, nextTick&#125; from &quot;vue&quot;<br>   import QR from &quot;qrcodejs2&quot;<br>   const input = ref(&#x27;&#x27;)<br>   let qrcodeDom = ref(null)<br>    let MakeQRcode=()=&gt;&#123;<br>        //防止多次生成二维码<br>        qrcodeDom.value.innerHTML = &quot;&quot;<br>        nextTick(()=&gt;&#123;<br>            new QR(qrcodeDom.value, &#123;<br>                text:input.value,//生成二维码内容<br>                colorDark:&quot;#000&quot;, //二维码颜色<br>                coloeLight:&quot;#fff&quot;, //二维码背景色<br>                //correctLevel:QR.CorrectLevel.H<br>            &#125;)<br>        &#125;)<br>    &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="6.png" alt="image.png"><br><a name="o6ouA"></a></p><h2 id="四-其他部分"><a href="#四-其他部分" class="headerlink" title="四.其他部分"></a>四.其他部分</h2><p>用户列表展示：<br><img src="7.png" alt="image.png"><br>搜索功能：<br><img src="8.png" alt="image.png"><br>修改功能：<br><img src="9.png" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>css垂直居中方法总结</title>
    <link href="/2024/03/13/css-center/"/>
    <url>/2024/03/13/css-center/</url>
    
    <content type="html"><![CDATA[<p>我们在学习CSS过程中，肯定会用到如何让元素垂直居中，今天我就总结一些常见的CSS垂直居中的方法吧。<br><a name="hb0p4"></a></p><h2 id="1-行高line-height"><a href="#1-行高line-height" class="headerlink" title="1.行高line-height"></a>1.行高line-height</h2><p>让文字垂直居中最简单的方法就是首先设置<strong>文字的行高等于盒子的高度，</strong>这样可以让文字垂直居中在盒子里，然后利用<strong>text-aline: center</strong>方法使文字水平居中于盒子中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>            <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">background-color</span>: chocolate;<br>            <span class="hljs-attribute">text-align</span>: center;<br>            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="1.png" alt="image.png"><br><a name="wtVxm"></a></p><h2 id="2-使用position-transform-translate-50-50"><a href="#2-使用position-transform-translate-50-50" class="headerlink" title="2.使用position + transform: translate(-50%,-50%)"></a>2.使用position + transform: translate(-50%,-50%)</h2><p>这个方法需要设置父盒子为相对定位，子盒子为绝对定位，然后子盒子的定位设置为：<strong>left: 50%；top:50%；</strong>使子盒子位于中心左侧和中心右侧。再利用水平位移<strong>transform</strong>到自身宽高的一半（负）就可以水平和垂直居中了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>            <span class="hljs-attribute">position</span>: relative;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>            <span class="hljs-attribute">background-color</span>: brown;<br>        &#125;<br>        <span class="hljs-selector-class">.child</span> &#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>            <span class="hljs-attribute">background-color</span>: blueviolet;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>            <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>           <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="2.png" alt="image.png"><img src="3.png" alt="image.png"><br><a name="KDkgr"></a></p><h2 id="3-position-margin减去子元素宽高的一半实现"><a href="#3-position-margin减去子元素宽高的一半实现" class="headerlink" title="3.position+margin减去子元素宽高的一半实现"></a>3.position+margin减去子元素宽高的一半实现</h2><p>上半部分与第二个方法一致，下半部分利用子盒子的<strong>margin-top</strong>与<strong>margin-left</strong>分别减去子盒子宽高的一半就可以垂直居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.child</span> &#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>            <span class="hljs-attribute">background-color</span>: blueviolet;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>            <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>            <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">30px</span>;<br>            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">50px</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><a name="ZmaEE"></a></p><h2 id="4-使用position-margin-auto实现"><a href="#4-使用position-margin-auto实现" class="headerlink" title="4.使用position+margin:auto实现"></a>4.使用position+margin:auto实现</h2><p>利用绝对定位<strong>top: 0;left: 0;bottom: 0;right: 0；</strong>使子元素充满整个容器，这时候使用<strong>margin: auto</strong>；就能使元素居中啦。这个方法需要给子元素设置高度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.child</span> &#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>            <span class="hljs-attribute">background-color</span>: blueviolet;<br>            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">margin</span>: auto;<br>        &#125;<br></code></pre></td></tr></table></figure><p><a name="SCakq"></a></p><h2 id="5-flex垂直居中（父flex，子margin）"><a href="#5-flex垂直居中（父flex，子margin）" class="headerlink" title="5.flex垂直居中（父flex，子margin）"></a>5.flex垂直居中（父flex，子margin）</h2><p>父元素设置<strong>display: flex；</strong>然后子元素使用<strong>margin:auto auto；</strong>就可以实现居中了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">background-color</span>: brown;<br>           <span class="hljs-attribute">display</span>: flex;<br>       &#125;<br><br>       <span class="hljs-selector-class">.child</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>           <span class="hljs-attribute">background-color</span>: blueviolet;<br>           <span class="hljs-attribute">margin</span>: auto auto;<br>       &#125;<br></code></pre></td></tr></table></figure><p><a name="P3urw"></a></p><h2 id="6-flex垂直居中（父align-items与justify-content）"><a href="#6-flex垂直居中（父align-items与justify-content）" class="headerlink" title="6.flex垂直居中（父align-items与justify-content）"></a>6.flex垂直居中（父align-items与justify-content）</h2><p>这个方法需要设置父元素<strong>flex</strong>布局，然后将<strong>align-items</strong>改为<strong>center</strong>即可实现垂直居中，将<strong>justify-content</strong>改为<strong>center</strong>即可实现水平居中，即使子元素高度不确定的情况下也可以使用该方法。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">background-color</span>: brown;<br>           <span class="hljs-attribute">display</span>: flex;<br>           <span class="hljs-comment">/* 垂直居中 */</span><br>           <span class="hljs-attribute">align-items</span>: center;<br>           <span class="hljs-comment">/* 水平居中 */</span><br>           <span class="hljs-attribute">justify-content</span>: center;<br>       &#125;<br></code></pre></td></tr></table></figure><p><a name="IeJ81"></a></p><h2 id="7-grid垂直居中（父grid，子align-self与justify-self）"><a href="#7-grid垂直居中（父grid，子align-self与justify-self）" class="headerlink" title="7.grid垂直居中（父grid，子align-self与justify-self）"></a>7.grid垂直居中（父grid，子align-self与justify-self）</h2><p>父元素设置<strong>grid</strong>网格布局，使得子元素可以使用网格定位。子元素<strong>align-self</strong> 和 <strong>justify-self</strong>都设置为<strong>center</strong> 用于控制子元素在网格单元格中的对齐方式为垂直居中和水平居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">background-color</span>: brown;<br>           <span class="hljs-attribute">display</span>: grid;<br>       &#125;<br><br>       <span class="hljs-selector-class">.child</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>           <span class="hljs-attribute">background-color</span>: blueviolet;<br>           <span class="hljs-comment">/* 垂直居中 */</span><br>           <span class="hljs-attribute">align-self</span>: center;<br>           <span class="hljs-comment">/* 水平居中 */</span><br>           justify-self: center;<br>       &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>genshen impact网页的部分模仿</title>
    <link href="/2024/03/04/genshen/"/>
    <url>/2024/03/04/genshen/</url>
    
    <content type="html"><![CDATA[<p><a name="kVt0h"></a></p><h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1.写在前面"></a>1.写在前面</h2><p>最近闲来无事，学习了前端的HTML+CSS还有javascript，刚好想要做点什么项目练练手，但是我自己写网页吧，还要自己进行网页设计，布局什么的还要自己想。我嫌太麻烦，还不如找个现成的网页模仿做一个不香嘛。<br>于是乎打开了原神官网（原神，启动！）觉得布局还不错，就决定模仿着试一下，就当给自己这段时间的学习做个总结。<br><a name="YSfr3"></a></p><h2 id="2-网页展示"><a href="#2-网页展示" class="headerlink" title="2.网页展示"></a>2.网页展示</h2><p>话不多说，先看图：<br><img src="1.png" alt="image.png"><br><img src="2.png" alt="image.png"><img src="3.png" alt="image.png"><br><img src="4.png" alt="image.png"><br>还有一些没有展示的，算了，那就先不展示了。其实我只完成了一小部分的网页<strong>首页</strong>，<strong>新闻</strong>，<strong>角色</strong>和<strong>漫画</strong>，要是全部都做下来对我这种新手来说也不太可能。而且每个页面也不是完全模仿，也都有自己的一些想法（当然也有可能有些效果是作者做不出来，所以放弃了…），总体来说，对自己做的还算满意。<br>这是文件夹目录：<br><img src="5.png" alt="image.png"><br>做这种项目，文件夹的分类还是很重要的，各种功能的文件都要区分好，不然要引用的时候找不到就麻烦了，或者修改也麻烦。<br><a name="iBxoE"></a></p><h2 id="3-布局技巧"><a href="#3-布局技巧" class="headerlink" title="3.布局技巧"></a>3.布局技巧</h2><p>首先是顶部的导航栏制作，这个感觉比较麻烦。它首先要固定在顶部，用position：fixed可以解决，然后导航栏的每个导航模块，使用的是向左浮动，并在一排，在集体对这些模块进行修饰。<br>还有一个就是我也加上了音乐模块，也在导航栏上，点击音乐按钮，音乐停止，出现禁止的标志；再次点击，禁止标志消失，音乐自动播放。就是下面最左边的那个图案：<br><img src="6.png" alt="image.png"><br>首页的话基本没什么可说的，我们看新闻页面，这三个盒子采用的是装在一个大盒子里，这个大盒子采用flex布局，让这三个小盒子并排在一排，并且垂直居中。<br>每个小盒子下面的时间是实时的，用js调Date对象，显示出来就行。<br><img src="7.png" alt="image.png"><br>包括下面的这些盒子，采用的也是flex布局。感觉flex确实好用，让子元素垂直居中方法最简单，不用一个滋贺子一个子盒子一个子盒子的修改，真的方便。<br><img src="8.png" alt="image.png"><br>另外要说的就是角色页面了，我是做了个简单的入场动画的。点击左边的城市，右边的人物会有一个从页面右边到左边的入场动画的。<br>还有我发现我点击城市的时候，该城市盒子有个向右的滑动，但是却会影响其他城市盒子，发生抖动。研究过后我发现，城市向右滑动的时候会撑开它们的父盒子，于是乎我将父盒子宽度加宽，抖动的问题就解决了，没有抖动看起来就是丝滑啊。<br><img src="9.png" alt="image.png"><br>这个我一开始的想法是用js排他思想，想法没错，但是就是做不出来这个效果，后来我把js的代码改成了jquery，就可以了?! 好神奇，以后有时间一定研究研究研究为什么。还有就是jquery获得容器和修改容器的方法比js简单的多，js太麻烦了，一个一个调，一个一个改。话说以后要是学了框架，肯定更简单！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;script&gt;<br>        $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> $arr1 = $(<span class="hljs-string">&#x27;.state li&#x27;</span>);<br>    <span class="hljs-keyword">var</span> $imgs = $(<span class="hljs-string">&#x27;.feng, .yan, .lei, .cao&#x27;</span>);<br>    <span class="hljs-keyword">var</span> $pics = $(<span class="hljs-string">&#x27;.wendi img, .zhongli img, .ying img, .naxida img&#x27;</span>);<br><br>    $arr1.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> index = $arr1.<span class="hljs-title function_">index</span>(<span class="hljs-variable language_">this</span>);<br>        $arr1.<span class="hljs-title function_">css</span>(&#123;<br>            <span class="hljs-string">&#x27;marginLeft&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>            <span class="hljs-string">&#x27;backgroundColor&#x27;</span>: <span class="hljs-string">&#x27;rgba(0,0,0,0)&#x27;</span><br>        &#125;);<br>        $imgs.<span class="hljs-title function_">hide</span>();<br>        $pics.<span class="hljs-title function_">hide</span>();<br><br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(&#123;<br>            <span class="hljs-string">&#x27;marginLeft&#x27;</span>: <span class="hljs-string">&#x27;15px&#x27;</span>,<br>            <span class="hljs-string">&#x27;backgroundColor&#x27;</span>: <span class="hljs-string">&#x27;rgba(0,0,0,0.5)&#x27;</span>,<br>        &#125;);<br>        $imgs.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">show</span>();<br>        $pics.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">show</span>();<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>到后面就差不多了，漫画部分也是用flex布局写的，就没什么可讲的了。<br><a name="vQ4W8"></a></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>这个项目还有很多不尽人意的地方，比如就是导航栏，每个页面都要用到导航栏，我却笨笨的把每个页面都加上导航栏的代码，代码冗余量好大！以后做这些公共样式一定得找个办法写一次就行，其他的需要了引入就行了，。<br>还有就是页面的盒子布局比较混乱，这个我在写css的时候就发现了，前前后后修改了很多遍，以后要多多学习布局技巧，才能提高效率。<br>给class起名的大部分也是拼音，这个我也是被自己整笑了，还是老老实实把英语给学好吧，不然以后肯定被人笑话。<br>好了这篇内容就写到这里了。主要的目的呢还是给这段时间的自己做个学习总结，看看学习成果如何。接下来的学习内容主要是网络相关的，然后再学点node与npm。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
