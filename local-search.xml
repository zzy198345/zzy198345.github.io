<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小区物业后台管理系统</title>
    <link href="/2024/04/06/myapp/"/>
    <url>/2024/04/06/myapp/</url>
    
    <content type="html"><![CDATA[<p><a name="XBlGu"></a></p><h2 id="一-项目介绍"><a href="#一-项目介绍" class="headerlink" title="一.项目介绍"></a>一.项目介绍</h2><p>本项目基于 Vue3+Element UI 完成了小区后台管理系统，其中包括<strong>登录与注册</strong>模块，<strong>用户信息列表</strong>模块，<strong>用户信息修改</strong>模块，<strong>可视化统计表展示</strong>模块以及<strong>支付页面</strong>模块。<br><a name="f1SFr"></a></p><h2 id="二-登录与注册"><a href="#二-登录与注册" class="headerlink" title="二.登录与注册"></a>二.登录与注册</h2><p>登录与注册模块：<br><img src="1.png" alt="image.png"><br><a name="sEkJE"></a></p><h3 id="1-ajax"><a href="#1-ajax" class="headerlink" title="1.ajax"></a>1.ajax</h3><p>我们在 util 文件夹，创建 <strong>axios 实例</strong>发送异步请求，并且添加请求拦截器和响应拦截器，以便在发起请求和接收响应时进行一些通用的处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install axios --save<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">import axios from &#x27;axios&#x27;<br>let axiosurl = &quot;&quot;<br>if(process.env.NODE_ENV === &quot;development&quot;)&#123;<br>    axiosurl = process.env.VUE_APP_API<br>&#125;<br> else &#123;<br>    axiosurl = process.env.VUE_APP_API<br> &#125;<br><br>//创建axios实例<br>const service  = axios.create(&#123;<br>    baseURL:axiosurl<br>&#125;)<br>// 添加请求拦截器<br>axios.interceptors.request.use(function (config) &#123;<br>    // 在发送请求之前做些什么<br>    return config;<br>  &#125;, function (error) &#123;<br>    // 对请求错误做些什么<br>    return Promise.reject(error);<br>  &#125;);<br><br>// 添加响应拦截器<br>axios.interceptors.response.use(function (response) &#123;<br>    // 2xx 范围内的状态码都会触发该函数。<br>    // 对响应数据做点什么<br>    return response;<br>  &#125;, function (error) &#123;<br>    // 超出 2xx 范围的状态码都会触发该函数。<br>    // 对响应错误做点什么<br>    console.log(&#x27;error&#x27;, error);<br>    return Promise.reject(error);<br>  &#125;);<br><br>  export default service<br></code></pre></td></tr></table></figure><p>然后在 API 文件夹下创建封装数据请求的函数 link。通过之前定义的 Axios 实例 <strong>service</strong> 发起 HTTP 请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">import service from &quot;../util/service&quot; <br>//封装相关数据请求<br>let link=(url,method=&quot;get&quot;,data,params)=&gt;&#123;<br>    return  new Promise((resolve, reject)=&gt;&#123;<br>        service.request(&#123;<br>            url,<br>            method,<br>            data,<br>            params<br>        &#125;).then((ok)=&gt;&#123;<br>            resolve(ok)<br>        &#125;).catch((err)=&gt;&#123;<br>            reject(err)<br>        &#125;)<br>    &#125;)<br>&#125;<br><br>export default link<br></code></pre></td></tr></table></figure><p>前端的 ajax 请求基本封装完了，接下来我们在mock 文件夹下使用下载** json-server** <strong>模拟服务器端接口数据，</strong>这样可以不依赖后端 API 进行开发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install -g json-server<br></code></pre></td></tr></table></figure><p>然后可以使用 <strong>npx</strong> 运行 <strong>json-server</strong>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>npx <span class="hljs-type">json</span>-<span class="hljs-keyword">server</span> <span class="hljs-comment">--watch data.json --port 8888</span><br></code></pre></td></tr></table></figure><p>在 package.json 重新命名在启动  **npm run mock **方便<br>服务器启动：<br><img src="2.png" alt="image.png"><br>获取注册数据：<br><img src="3%E3%80%81.png" alt="image.png"><br><a name="BOd1K"></a></p><h3 id="2-js-md5-密码加密"><a href="#2-js-md5-密码加密" class="headerlink" title="2.js-md5 密码加密"></a>2.js-md5 密码加密</h3><p>为了保证登录注册的安全性，我们采用 js-md5 对输入的密码进行加密。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install -D js-md5<br></code></pre></td></tr></table></figure><p>封装 hook 加密：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">import md5 from &quot;js-md5&quot;;<br><br>import &#123; ref &#125; from &quot;vue&quot;; <br><br>export default function(data)&#123;<br>    let md5Data = ref(md5(data))<br>    return md5Data<br>&#125;<br></code></pre></td></tr></table></figure><p>对输入的数据我们使用 md5 方法进行加密：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">let data = &#123;<br>          text: ruleForm.text, <br>          pwd: useMd5(ruleForm.pass).value<br>        &#125;<br></code></pre></td></tr></table></figure><p><a name="X9VMe"></a></p><h2 id="三-可视化图表"><a href="#三-可视化图表" class="headerlink" title="三. 可视化图表"></a>三. 可视化图表</h2><p>安装可视化图表库echarts     </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm install --save echarts          <br></code></pre></td></tr></table></figure><p>我们先在 App.vue 引入echarts     </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>  // 引入可视化图表库<br>  import * as echarts from &quot;echarts&quot;<br>  import &#123;provide, Provider&#125; from &quot;vue&quot;<br>  provide(&quot;echarts&quot;, echarts)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>再使用 <strong>inject</strong> 函数注入了名为 <strong>$echarts</strong> 的变量，用于获取 ECharts 实例。在 <strong>onMounted</strong> 钩子中，首先通过 <strong>Link</strong> 函数请求了一个 API (<strong>apiUrl.chartData0ne</strong>) 用于获取数据，并将数据分别存储到 <strong>xdata</strong> 和 <strong>ydata</strong> 中。<br>然后初始化 ECharts 实例 <strong>myChart</strong>，并使用 <strong>setOption</strong> 方法设置了图表的配置选项。x 轴的数据使用请求回来的数据，而 y 轴的数据则是固定的，<strong>series</strong> 中定义了图表的类型为柱状图（<strong>bar</strong>），以及柱状图的样式配置，包括颜色渐变和圆角等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h2&gt;人数统计&lt;/h2&gt;<br>        &lt;div class=&quot;chartone&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>    import &#123; inject, onMounted, reactive &#125; from &quot;vue&quot;<br>    import Link from &#x27;../API/Link.js&#x27;<br>    import apiUrl from &#x27;../API/url.js&#x27;<br><br>    let data = reactive(&#123;&#125;)<br>    let xdata = reactive([])<br>    let ydata = reactive([])<br><br>    let $echarts = inject(&quot;echarts&quot;)<br><br>    onMounted(() =&gt; &#123;<br>        let myChart = $echarts.init(document.querySelector(&quot;.chartone&quot;))<br><br>        Link(apiUrl.chartData0ne).then(ok =&gt; &#123;<br>            let &#123; data &#125; = ok<br>            xdata = data.map(v=&gt; v.title)<br>            ydata = data.map(v=&gt; v.num)<br>        &#125;)<br>        myChart.setOption(&#123;<br>            xAxis: &#123;<br>                type: &quot;category&quot;,<br>                data: xdata               <br>            &#125;,<br>            yAxis: &#123;<br>                type: &quot;value&quot;,                 <br>            &#125;,<br>            tooltip:&#123;&#125;,<br>            series: [<br>                &#123;<br>                    type: &quot;bar&quot;,  //定义图表的类型为柱状图                 <br>                    data: ydata,<br>                    itemStyle:&#123;<br>                        normal:&#123;<br>                            barBorderRadius:[20,20,0,0],<br>                            color:new $echarts.graphic.LinearGradient(0,1,0,0,[<br>                                &#123;<br>                                    offset:0,<br>                                    color:&quot;#005eaa&quot;<br>                                &#125;,<br>                                &#123;<br>                                    offset:0.5,<br>                                    color:&quot;#339ca8&quot;<br>                                &#125;,<br>                                &#123;<br>                                    offset:1,<br>                                    color:&quot;#cda819&quot;<br>                                &#125;,<br>                            ])<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            ]<br>        &#125;)<br>    &#125;)<br><br>&lt;/script&gt;<br><br>&lt;style&gt;<br>    h2 &#123;<br>        height: 60px;<br>        color: chocolate;<br>        line-height: 0.6rem;<br>        font-size: 0.25rem;<br>        margin-left:4rem;<br>    &#125;<br>    .chartone &#123;<br>        height: 5rem;<br>    &#125;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="4.png" alt="image.png"><br>我们查询 echarts 官网，根据上面的方法，总共绘制了如下图表：<br><img src="5.png" alt="image.png"><br><a name="Jh7Vk"></a></p><h2 id="三-二维码生成"><a href="#三-二维码生成" class="headerlink" title="三.二维码生成"></a>三.二维码生成</h2><p>安装 qrcodejs2 生成二维码,具体过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">npm i qrcodejs2 <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;content&quot;&gt;<br>     &lt;div class=&quot;inputDom&quot;&gt;<br>        &lt;el-input v-model=&quot;input&quot; style=&quot;width: 240px&quot; placeholder=&quot;请输入收款金额&quot; /&gt;<br>        &lt;el-button type=&quot;success&quot; @click=&quot;MakeQRcode&quot;&gt;生成二维码&lt;/el-button&gt;<br>     &lt;/div&gt;<br>     &lt;div class=&quot;qrcode&quot; ref=&quot;qrcodeDom&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br> &lt;/template&gt;<br> <br> &lt;script setup&gt;<br>   import &#123;ref, nextTick&#125; from &quot;vue&quot;<br>   import QR from &quot;qrcodejs2&quot;<br>   const input = ref(&#x27;&#x27;)<br>   let qrcodeDom = ref(null)<br>    let MakeQRcode=()=&gt;&#123;<br>        //防止多次生成二维码<br>        qrcodeDom.value.innerHTML = &quot;&quot;<br>        nextTick(()=&gt;&#123;<br>            new QR(qrcodeDom.value, &#123;<br>                text:input.value,//生成二维码内容<br>                colorDark:&quot;#000&quot;, //二维码颜色<br>                coloeLight:&quot;#fff&quot;, //二维码背景色<br>                //correctLevel:QR.CorrectLevel.H<br>            &#125;)<br>        &#125;)<br>    &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="6.png" alt="image.png"><br><a name="o6ouA"></a></p><h2 id="四-其他部分"><a href="#四-其他部分" class="headerlink" title="四.其他部分"></a>四.其他部分</h2><p>用户列表展示：<br><img src="7.png" alt="image.png"><br>搜索功能：<br><img src="8.png" alt="image.png"><br>修改功能：<br><img src="9.png" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>css垂直居中方法总结</title>
    <link href="/2024/03/13/css-center/"/>
    <url>/2024/03/13/css-center/</url>
    
    <content type="html"><![CDATA[<p>我们在学习CSS过程中，肯定会用到如何让元素垂直居中，今天我就总结一些常见的CSS垂直居中的方法吧。<br><a name="hb0p4"></a></p><h2 id="1-行高line-height"><a href="#1-行高line-height" class="headerlink" title="1.行高line-height"></a>1.行高line-height</h2><p>让文字垂直居中最简单的方法就是首先设置<strong>文字的行高等于盒子的高度，</strong>这样可以让文字垂直居中在盒子里，然后利用<strong>text-aline: center</strong>方法使文字水平居中于盒子中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>            <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">background-color</span>: chocolate;<br>            <span class="hljs-attribute">text-align</span>: center;<br>            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="1.png" alt="image.png"><br><a name="wtVxm"></a></p><h2 id="2-使用position-transform-translate-50-50"><a href="#2-使用position-transform-translate-50-50" class="headerlink" title="2.使用position + transform: translate(-50%,-50%)"></a>2.使用position + transform: translate(-50%,-50%)</h2><p>这个方法需要设置父盒子为相对定位，子盒子为绝对定位，然后子盒子的定位设置为：<strong>left: 50%；top:50%；</strong>使子盒子位于中心左侧和中心右侧。再利用水平位移<strong>transform</strong>到自身宽高的一半（负）就可以水平和垂直居中了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>            <span class="hljs-attribute">position</span>: relative;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>            <span class="hljs-attribute">background-color</span>: brown;<br>        &#125;<br>        <span class="hljs-selector-class">.child</span> &#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>            <span class="hljs-attribute">background-color</span>: blueviolet;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>            <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>           <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="2.png" alt="image.png"><img src="3.png" alt="image.png"><br><a name="KDkgr"></a></p><h2 id="3-position-margin减去子元素宽高的一半实现"><a href="#3-position-margin减去子元素宽高的一半实现" class="headerlink" title="3.position+margin减去子元素宽高的一半实现"></a>3.position+margin减去子元素宽高的一半实现</h2><p>上半部分与第二个方法一致，下半部分利用子盒子的<strong>margin-top</strong>与<strong>margin-left</strong>分别减去子盒子宽高的一半就可以垂直居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.child</span> &#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>            <span class="hljs-attribute">background-color</span>: blueviolet;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>            <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>            <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">30px</span>;<br>            <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">50px</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><a name="ZmaEE"></a></p><h2 id="4-使用position-margin-auto实现"><a href="#4-使用position-margin-auto实现" class="headerlink" title="4.使用position+margin:auto实现"></a>4.使用position+margin:auto实现</h2><p>利用绝对定位<strong>top: 0;left: 0;bottom: 0;right: 0；</strong>使子元素充满整个容器，这时候使用<strong>margin: auto</strong>；就能使元素居中啦。这个方法需要给子元素设置高度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.child</span> &#123;<br>            <span class="hljs-attribute">position</span>: absolute;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>            <span class="hljs-attribute">background-color</span>: blueviolet;<br>            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">margin</span>: auto;<br>        &#125;<br></code></pre></td></tr></table></figure><p><a name="SCakq"></a></p><h2 id="5-flex垂直居中（父flex，子margin）"><a href="#5-flex垂直居中（父flex，子margin）" class="headerlink" title="5.flex垂直居中（父flex，子margin）"></a>5.flex垂直居中（父flex，子margin）</h2><p>父元素设置<strong>display: flex；</strong>然后子元素使用<strong>margin:auto auto；</strong>就可以实现居中了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">background-color</span>: brown;<br>           <span class="hljs-attribute">display</span>: flex;<br>       &#125;<br><br>       <span class="hljs-selector-class">.child</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>           <span class="hljs-attribute">background-color</span>: blueviolet;<br>           <span class="hljs-attribute">margin</span>: auto auto;<br>       &#125;<br></code></pre></td></tr></table></figure><p><a name="P3urw"></a></p><h2 id="6-flex垂直居中（父align-items与justify-content）"><a href="#6-flex垂直居中（父align-items与justify-content）" class="headerlink" title="6.flex垂直居中（父align-items与justify-content）"></a>6.flex垂直居中（父align-items与justify-content）</h2><p>这个方法需要设置父元素<strong>flex</strong>布局，然后将<strong>align-items</strong>改为<strong>center</strong>即可实现垂直居中，将<strong>justify-content</strong>改为<strong>center</strong>即可实现水平居中，即使子元素高度不确定的情况下也可以使用该方法。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">background-color</span>: brown;<br>           <span class="hljs-attribute">display</span>: flex;<br>           <span class="hljs-comment">/* 垂直居中 */</span><br>           <span class="hljs-attribute">align-items</span>: center;<br>           <span class="hljs-comment">/* 水平居中 */</span><br>           <span class="hljs-attribute">justify-content</span>: center;<br>       &#125;<br></code></pre></td></tr></table></figure><p><a name="IeJ81"></a></p><h2 id="7-grid垂直居中（父grid，子align-self与justify-self）"><a href="#7-grid垂直居中（父grid，子align-self与justify-self）" class="headerlink" title="7.grid垂直居中（父grid，子align-self与justify-self）"></a>7.grid垂直居中（父grid，子align-self与justify-self）</h2><p>父元素设置<strong>grid</strong>网格布局，使得子元素可以使用网格定位。子元素<strong>align-self</strong> 和 <strong>justify-self</strong>都设置为<strong>center</strong> 用于控制子元素在网格单元格中的对齐方式为垂直居中和水平居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">background-color</span>: brown;<br>           <span class="hljs-attribute">display</span>: grid;<br>       &#125;<br><br>       <span class="hljs-selector-class">.child</span> &#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>           <span class="hljs-attribute">background-color</span>: blueviolet;<br>           <span class="hljs-comment">/* 垂直居中 */</span><br>           <span class="hljs-attribute">align-self</span>: center;<br>           <span class="hljs-comment">/* 水平居中 */</span><br>           justify-self: center;<br>       &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>genshen impact网页的部分模仿</title>
    <link href="/2024/03/04/genshen/"/>
    <url>/2024/03/04/genshen/</url>
    
    <content type="html"><![CDATA[<p><a name="kVt0h"></a></p><h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1.写在前面"></a>1.写在前面</h2><p>最近闲来无事，学习了前端的HTML+CSS还有javascript，刚好想要做点什么项目练练手，但是我自己写网页吧，还要自己进行网页设计，布局什么的还要自己想。我嫌太麻烦，还不如找个现成的网页模仿做一个不香嘛。<br>于是乎打开了原神官网（原神，启动！）觉得布局还不错，就决定模仿着试一下，就当给自己这段时间的学习做个总结。<br><a name="YSfr3"></a></p><h2 id="2-网页展示"><a href="#2-网页展示" class="headerlink" title="2.网页展示"></a>2.网页展示</h2><p>话不多说，先看图：<br><img src="1.png" alt="image.png"><br><img src="2.png" alt="image.png"><img src="3.png" alt="image.png"><br><img src="4.png" alt="image.png"><br>还有一些没有展示的，算了，那就先不展示了。其实我只完成了一小部分的网页<strong>首页</strong>，<strong>新闻</strong>，<strong>角色</strong>和<strong>漫画</strong>，要是全部都做下来对我这种新手来说也不太可能。而且每个页面也不是完全模仿，也都有自己的一些想法（当然也有可能有些效果是作者做不出来，所以放弃了…），总体来说，对自己做的还算满意。<br>这是文件夹目录：<br><img src="5.png" alt="image.png"><br>做这种项目，文件夹的分类还是很重要的，各种功能的文件都要区分好，不然要引用的时候找不到就麻烦了，或者修改也麻烦。<br><a name="iBxoE"></a></p><h2 id="3-布局技巧"><a href="#3-布局技巧" class="headerlink" title="3.布局技巧"></a>3.布局技巧</h2><p>首先是顶部的导航栏制作，这个感觉比较麻烦。它首先要固定在顶部，用position：fixed可以解决，然后导航栏的每个导航模块，使用的是向左浮动，并在一排，在集体对这些模块进行修饰。<br>还有一个就是我也加上了音乐模块，也在导航栏上，点击音乐按钮，音乐停止，出现禁止的标志；再次点击，禁止标志消失，音乐自动播放。就是下面最左边的那个图案：<br><img src="6.png" alt="image.png"><br>首页的话基本没什么可说的，我们看新闻页面，这三个盒子采用的是装在一个大盒子里，这个大盒子采用flex布局，让这三个小盒子并排在一排，并且垂直居中。<br>每个小盒子下面的时间是实时的，用js调Date对象，显示出来就行。<br><img src="7.png" alt="image.png"><br>包括下面的这些盒子，采用的也是flex布局。感觉flex确实好用，让子元素垂直居中方法最简单，不用一个滋贺子一个子盒子一个子盒子的修改，真的方便。<br><img src="8.png" alt="image.png"><br>另外要说的就是角色页面了，我是做了个简单的入场动画的。点击左边的城市，右边的人物会有一个从页面右边到左边的入场动画的。<br>还有我发现我点击城市的时候，该城市盒子有个向右的滑动，但是却会影响其他城市盒子，发生抖动。研究过后我发现，城市向右滑动的时候会撑开它们的父盒子，于是乎我将父盒子宽度加宽，抖动的问题就解决了，没有抖动看起来就是丝滑啊。<br><img src="9.png" alt="image.png"><br>这个我一开始的想法是用js排他思想，想法没错，但是就是做不出来这个效果，后来我把js的代码改成了jquery，就可以了?! 好神奇，以后有时间一定研究研究研究为什么。还有就是jquery获得容器和修改容器的方法比js简单的多，js太麻烦了，一个一个调，一个一个改。话说以后要是学了框架，肯定更简单！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;script&gt;<br>        $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> $arr1 = $(<span class="hljs-string">&#x27;.state li&#x27;</span>);<br>    <span class="hljs-keyword">var</span> $imgs = $(<span class="hljs-string">&#x27;.feng, .yan, .lei, .cao&#x27;</span>);<br>    <span class="hljs-keyword">var</span> $pics = $(<span class="hljs-string">&#x27;.wendi img, .zhongli img, .ying img, .naxida img&#x27;</span>);<br><br>    $arr1.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> index = $arr1.<span class="hljs-title function_">index</span>(<span class="hljs-variable language_">this</span>);<br>        $arr1.<span class="hljs-title function_">css</span>(&#123;<br>            <span class="hljs-string">&#x27;marginLeft&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>            <span class="hljs-string">&#x27;backgroundColor&#x27;</span>: <span class="hljs-string">&#x27;rgba(0,0,0,0)&#x27;</span><br>        &#125;);<br>        $imgs.<span class="hljs-title function_">hide</span>();<br>        $pics.<span class="hljs-title function_">hide</span>();<br><br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(&#123;<br>            <span class="hljs-string">&#x27;marginLeft&#x27;</span>: <span class="hljs-string">&#x27;15px&#x27;</span>,<br>            <span class="hljs-string">&#x27;backgroundColor&#x27;</span>: <span class="hljs-string">&#x27;rgba(0,0,0,0.5)&#x27;</span>,<br>        &#125;);<br>        $imgs.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">show</span>();<br>        $pics.<span class="hljs-title function_">eq</span>(index).<span class="hljs-title function_">show</span>();<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>到后面就差不多了，漫画部分也是用flex布局写的，就没什么可讲的了。<br><a name="vQ4W8"></a></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>这个项目还有很多不尽人意的地方，比如就是导航栏，每个页面都要用到导航栏，我却笨笨的把每个页面都加上导航栏的代码，代码冗余量好大！以后做这些公共样式一定得找个办法写一次就行，其他的需要了引入就行了，。<br>还有就是页面的盒子布局比较混乱，这个我在写css的时候就发现了，前前后后修改了很多遍，以后要多多学习布局技巧，才能提高效率。<br>给class起名的大部分也是拼音，这个我也是被自己整笑了，还是老老实实把英语给学好吧，不然以后肯定被人笑话。<br>好了这篇内容就写到这里了。主要的目的呢还是给这段时间的自己做个学习总结，看看学习成果如何。接下来的学习内容主要是网络相关的，然后再学点node与npm。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
